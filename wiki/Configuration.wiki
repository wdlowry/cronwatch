#summary Configuration options
#labels Phase-Deploy

= Configuration File Location =
By default, cronwatch will check if /etc/cronwatch.conf exists, and if it does, load the configuration from it. If this file does not exist, then cronwatch will behave essentially as if it were cron (see the defaults below).

If a configuration file is specified on the command line (-c option), then cronwatch will try to open that file and fail if it does not exist.

= Configuration File Structure =
The configuration file is a INI-style configuration file. Each section specifies the settings for a cronwatch job or jobs.

The tag option (-t option) cronwatch which section to use. If the tag is not specified on the command line, cronwatch generates the tag from the basename of the program it is supposed to run. For example, if the program is `/usr/local/bin/my_fun_script`, then the tag is `my_fun_script`.

cronwatch handles the `defaults` section in a special manner. Setting in this section are automatically applied to other sections unless that particular setting is set in the other section.

Finally, multiple instances of the same configuration option in the same file are handled as lists. Thus, you can specify multiple values for certain configuration options by just repeating the setting name.

= Example Configuration File =
Here is an example configuration file. See the configuration options below for more information.
{{{
# These defaults are applied to the other sections
[defaults]

# Send an e-mail to root on the local machine when something messes up
email = root

# Truncate the e-mail if it's bigger than 1M
email_maxsize = 1048576

# The exit code must either be 0 or 10
exit_codes = 0
exit_code = 10

[log_cleanup]
# Make sure this regular expression is in the output
required = [0-9]+ log file\(s\) successfully rotated.

# Both of 
blacklist = (?i)error
blacklist = ^Could not open
logfile = /var/log/%TAG%-%Y%m%d%h%m.log
}}}

= Regular Expressions =
cronwatch uses the Python re module for regular expression matching. Python's re module uses a similar syntax to PCRE. See http://docs.python.org/library/re.html#regular-expression-syntax for more details.

= Configuration Options =
cronwatch understands these configuration options.

== required ==
|| *Name:* || `required` ||
|| *Default Value:* || None ||
|| *Description:* || A regular expression or a list of regular expressions that must be found in the output for the job to be considered successful. ||

== blacklist ===
|| *Name:* || `blacklist` ||
|| *Default Value:* || `.*` ||
|| *Description:* || A regular expression or a list of regular expressions that will result in an error if found in the output. ||

== whitelist ==
|| *Name:* || `whitelist` ||
|| *Default Value:* || None ||
|| *Description:* || A regular expression or a list of regular expressions that if are not matched will result in an error. ||

If whitelist is specified, then the every line of output is matches against the regular expression(s). If it does not match, then cronwatch will flag the output as an error.

If both whitelist and blacklist are specified, then the output is first tested against whitelist. If it passes, it is then tested against blacklist. For example, if whitelist is `success` and blacklist is `not` then `not successful` will match both and thus be marked as an error.

== exit_codes ==
|| *Name:* || `exit_codes` ||
|| *Default Value:* || `0` ||
|| *Description:* || A list of acceptable error code. Other error codes will result in an error. ||

== email ==
|| *Name:* || `email` ||
|| *Default Value:* || `root` ||
|| *Description:* || An e-mail address to send out put to. This address can be a local account, for example, `root`, the default. ||

== email_maxsize ==
|| *Name:* || `email_maxsize` ||
|| *Default Value:* || `4096` ||
|| *Description:* || The maximum size of output to send in an e-mail. If everything should be sent, then `email_maxlines` should be set to -1 ||

*Caution*: If you don't know the maximum size of the output, it would be better to set a maximum size just in case the output gets really large.

== email_success ==
|| *Name:* || `email_success` ||
|| *Default Value:* || `false` ||
|| *Description:* || Determines whether an e-mail should be sent if the job was successful.||

== logfile ==
|| *Name:* || `logfile` ||
|| *Default Value:* || None ||
|| *Description:* || The file name for the log file. ||

When determining the log file name, cronwatch first replaces `%TAG%` with the current tag and then uses Python's [http://docs.python.org/library/datetime.html#strftime-strptime-behavior strftime] to add date and time information. For example, `/var/log/cronwatch-%TAG%-%Y%m%d%h%M.log` would be evaluated to something like `/var/log/cronwatch-myjob-201001010952.log`.