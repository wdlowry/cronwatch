#summary Design of the cronwatch wrapper script
#labels Phase-Design,Wrapper

= Command Line Arguments =
 * -q
  * Specifies the queue directory
  * Default: /var/lib/cronwatch/wrapper
 * -u
  * Specifies the unique id
  * Default: $1 or what is in the config file
 * -c
  * Specifies the configuration file for the processor
  * Default: none

= Queue Directory Layout =
Each time a cron job runs, cronwatch will create a unique directory QUEUE_DIR/ID, where ID is generated using one of the methods listed below. 

 * QUEUE_DIR
  * ID.lock - the lock file to let the collector know that this job is still running; also contains the PID of the cronwatch wrapper script
  * ID/
   * output - contains the output the actual job
   * config - the config file, if one was specified
   * status - data about the run including start time, stop time, return code, full path, arguments


= Generating the Unique Directory =
The id must not contain a "." character since this character is used for the lock file.

Here are a list of possible methods:

 * urandom + sum
  * dd if=/dev/urandom bs=1024 count=2 2> /dev/null | sum | cut -f 1 -d ' '
  * Add in pid and $1?
 * md5sum
  * MD5sum of PID and $1?
 * date
  * PID + date?
  * This would always be unique and it's the quickest, so I think we'll want to use this one.

= Process =
 # Read and handle command line arguments
 # Determine unique id (and make sure it doesn't exist)
 # Set up the signal handler for quit
  * Write the stop time to the status file
  * Remove the lock file
 # Create the lock file
 # Create the queue directory
 # Copy the config file
 # Create the status file
 # Run command and capture output (use a clean environment)
 # Exit